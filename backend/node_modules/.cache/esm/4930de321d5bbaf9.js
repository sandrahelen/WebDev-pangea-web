let ApolloServer,gql,typeDefs,session,mongoose,APP_PORT,IN_PROD,DB_HOST,DB_NAME,DB_PASSWORD,DB_PORT,DB_USERNAME;_1d5‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);_1d5‍.w("./typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_1d5‍.w("express-session",[["default",["session"],function(v){session=v}]]);_1d5‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_1d5‍.w("./config.ts",[["APP_PORT",["APP_PORT"],function(v){APP_PORT=v}],["IN_PROD",["IN_PROD"],function(v){IN_PROD=v}],["DB_HOST",["DB_HOST"],function(v){DB_HOST=v}],["DB_NAME",["DB_NAME"],function(v){DB_NAME=v}],["DB_PASSWORD",["DB_PASSWORD"],function(v){DB_PASSWORD=v}],["DB_PORT",["DB_PORT"],function(v){DB_PORT=v}],["DB_USERNAME",["DB_USERNAME"],function(v){DB_USERNAME=v}]]);

//import resolvers from "./resolvers";

const express = require("express");




// mongodb://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
(async () => {
    try {
        await mongoose.connect(
            `mongodb://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}`,
            { useNewUrlParser: true } // fikser advarsel om deprecated url string parser
        )
        //url skal være it2810-70.idi.ntnu.no

        const app = express();

        //app.disable("x-powered-by");


        const server = new ApolloServer({
            typeDefs, playground: true
        });

        server.applyMiddleware({app});

        app.listen({ port: APP_PORT}, () =>
            console.log(`server is running at http://localhost:${APP_PORT}`)
        )
    } catch (e){
        _1d5‍.g.console.error(e);
    }


})()



